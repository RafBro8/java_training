Method Overloading means providing two or more separate Methods in a Class with the same name but different Parameters
Method return type may or may not be different and that allows us to reuse the same Method name
Overloading is very handy, it reduces duplicated code and we don't have to remember multiple Method names

Overloading rules:
Methods must have the same Method name
Methods must have different Parameters


Method Overriding means defining a Method in a Child Class
that already exists in the Parent Class with same signature (same name, same arguments

Can't Override Static Methods, only Instance Methods

Overriding rules:
It must have same name and same arguments
Return Type can be a Subclass of the Return Type in Parent Class
Overridden Method can't have a lower Access Modifier

Methods can be overridden only in Child Classes
Constructors and Private Methods cannot be overridden

OVERLOADING

class Dog {

     public void bark() {
          System.out.println("woof");
     }

      public void bark(int number) {
           for(int i = 0; i < number; i++) {
              System.out.println("woof");
           }
        }
    }



OVERRIDING

class Dog {

     public void bark() {
          System.out.println("woof");
     }
   }


class GermanShepherd extends Dog {

      @Override
      public void bark() {
          System.out.println("woof woof woof");

      }
    }
 }













